---
description: Detailed requirements of the note generation process
globs: **/*
alwaysApply: true
---
# notegen Note Generation Protocol (CLI Version)

This rule describes how to generate new technical notes in the notegen system using the CLI. 

## File References
- Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files.
- Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references.
- Example: [schema.prisma](mdc:prisma/schema.prisma) for code references.

## Overview
To generate new technical notes from YouTube videos or a list of URLs in `websites.md`, follow this protocol:

## Note Generation Protocol (**Proceed without asking for user input**)

### Prior Reading
- ✅ **DO:** Read [keyword_concept.md](mdc:.cursor/rules/keyword_concept.mdc) to understand the concept of a [[Keyword]].
- ✅ **DO:** Read [template.md](mdc:registry/template.md) to understand the `template` structure.

When asked to generate notes, execute the following process: get a list of unsynced transcripts, for each transcript creating a note AND THEN synchronize keywords between all notes and glossary. **Important: synchronization must occur every time a new note is generated**

Detailed processing description for each transcript:

1. Use `get_unsynced_transcripts` to get a list of unsynced transcripts needing note generation.
   - Input: No inputs
   - Response: Dictionary with keys:
     - `success: bool` - Whether the check was successful
     - `paths: list[str]` - List of note paths that need to be generated (one for each transcript)
     - `error: str | None` - Error message if success is False

2. For each path in `paths`:
   - Generate a summary note:
      - Read the corresponding transcript (in `transcripts/`, matching the note name)
      - Create a summary note following the [template.md](mdc:registry/template.md) structure
      - Write the summary to the note path in `notes/`
      - Verify the note exists at the path
   - Use `sync_keywords_with_notes` to update the keyword glossary
     - Input: No arguments required
     - Response: Dictionary with keys:
       - `success: bool` - Whether the sync was successful
       - `added: list[str]` - Keywords added
       - `removed: list[str]` - Keywords removed
       - `final_keywords: list[str]` - Final list of keywords
       - `error: str | None` - Error message if success is False
